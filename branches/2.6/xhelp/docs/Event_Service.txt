// xHelp Events Service
// * All functions should return a boolean unless otherwise noted

/**
 * Getting an instance of the xHelp event service
 */
$_eventSrv =& xhelp_eventService::singleton(); 

/**
 * Listening for an event
 * @param string $event_name Event to listen for
 * @param object $obj Object that will handle the event
 * @param string $function_name Name of callback function within object
 * @return int Value used to identify callback function in future
 */
$id = $_eventSrv->advise($event_name, $obj, $function_name);

/**
 * Stop listening for an event
 * @param string $event_name Event to stop listening to
 * @param int $id ID for callback function (from advise)
 */
$_eventSrv->unadvise($event_name, $id);

/**
 * Event: batch_delete_ticket
 * Triggered after a batch ticket deletion
 * @param array $tickets The xhelpTicket objects that were deleted
 */
function batch_delete_ticket($tickets)
{}

/**
 * Event: batch_dept
 * Triggered after a batch ticket department change
 * @param array $tickets The xhelpTicket objects that were modified
 * @param int $department The new department for the tickets
 */
function batch_dept($tickets, $department)
{}

/**
 * Event: batch_owner
 * Triggered after a batch ticket ownership change
 * @param array $tickets The xhelpTicket objects that were modified
 * @param int $owner The XOOPS UID of the new owner
 */
function batch_owner($tickets, $owner)
{}

/**
 * Event: batch_priority
 * Triggered after a batch ticket priority change
 * @param array $tickets The xhelpTicket objects that were modified
 * @param int $priority The new ticket priority
 */
function batch_priority($tickets, $priority)
{}

/**
 * Event: batch_response
 * Triggered after a batch response addition
 * Note: the $response->getVar('ticketid') field is empty for this function
 * @param array $tickets The xhelpTicket objects that were modified
 * @param xhelpResponses $response The response added to each ticket
 */
function batch_response($tickets, $response) 
{}

/**
 * Event: batch_status
 * Triggered after a batch ticket status change
 * @param array $tickets The xhelpTicket objects that were modified
 * @param xhelpStatus $status The new ticket status
 */
function batch_status($tickets, $status)
{}

/**
 * Event: close_ticket
 * Triggered after a ticket's status change from a status
 * with a state of XHELP_STATE_UNRESOLVED to a status
 * with a state of XHELP_STATE_RESOLVED
 * Also See: update_status, reopen_ticket
 * @param xhelpTicket $ticket The ticket that was closed
 */
function close_ticket($ticket)
{}

/**
 * Event: delete_department
 * Triggered after a department is removed from xHelp
 * @param xhelpDepartment $dept Department that was removed
 */
function delete_department($dept)
{}

/**
 * Event: delete_field
 * Triggered after a custom field is removed from xHelp
 * @param xhelpTicketField $field Custom field that was removed
 */
function delete_field($field)
{}

/**
 * Event: delete_file
 * Triggered after a file is removed from a ticket
 * @param xhelpFile $file File that was removed
 */
function delete_file($file)
{}

/**
 * Event: delete_responseTpl
 * Triggered after a staff auto-response is deleted
 * @param xhelpResponseTemplates $responseTpl auto-response that was deleted
 */
function delete_responseTpl($responseTpl)
{}

/**
 * Event: delete_staff
 * Triggered after a staff member is removed from xHelp
 * @param xhelpStaff $staff Staff Member that was removed
 */
function delete_staff($staff)
{}

/**
 * Event: delete_ticket
 * Triggered after a ticket is deleted
 * @param xhelpTicket $ticket Ticket that was deleted
 */
function delete_ticket($ticket)
{}

/**
 * Event: edit_response
 * Triggered after a response has been modified
 * Also See: new_response
 * @param xhelpTicket $newTicket Ticket after modifications
 * @param xhelpResponses $newResponse Modified response
 * @param xhelpTicket $oldTicket Ticket before modifications
 * @param xhelpResponses $oldResponse Response modifications
 */
function edit_response($newTicket, $newResponse, $oldTicket, $oldResponse)
{}

/**
 * Event: edit_ticket
 * Triggered after a ticket is modified
 * @param xhelpTicket $oldTicket Ticket information before modifications
 * @param xhelpTicket $newTicket Ticket information after modifications
 */
function edit_ticket($oldTicket, $newTicket)
{}

/**
 * Event: merge_tickets
 * Triggered after two tickets are merged
 * @param int $ticket1 First ticketid being merged
 * @param int $ticket2 Second ticketid being merged
 * @param int $mergedTicket Resulting ticketid after merge
 */
function merge_tickets($ticket1, $ticket2, $mergedTicket)
{}

/**
 * Event: new_faq
 * Triggered after FAQ addition
 * @param xhelpTicket $ticket Ticket used as base for FAQ
 * @param xhelpFaq $faq FAQ that was added
 */
function new_faq($ticket, $faq)
{}

/**
 * Event: new_file
 * Triggered after a file is added to a ticket
 * @param xhelpTicket $ticket Ticket file was attached to
 * @param xhelpFile $file Information about file uploaded
 */
function new_file($ticket, $file)
{}

/**
 * Event: new_response
 * Triggered after a response has been added to a ticket
 * @param xhelpTicket $ticket Ticket containing response
 * @param xhelpResponses $newResponse Response that was added
 */
function new_response($ticket, $newResponse)
{}

/**
 * Event: new_response_rating
 * Triggered after a user rates a staff member response
 * @param xhelpStaffReview $review Review specifics
 * @param xhelpTicket $ticket Ticket that was reviewed
 * @param xhelpResponses $response Exact response that was reviewed
 */
function new_response_rating($review, $ticket, $response)
{}

/**
 * Event: new_ticket
 * Triggered after a ticket is added to the helpdesk
 * @param xhelpTicket $ticket Ticket that was added
 */
function new_ticket($ticket)
{}

/**
 * Event: new_user_by_email
 * Triggered after new user account is created during ticket submission
 * @param string $password Password for new account
 * @param XoopsUser $xoopsUser XOOPS user object for new account
 */
function new_user_by_email($password, $xoopsUser)
{}

/**
 * Event: reopen_ticket
 * Triggered after a ticket's status change from a status
 * with a state of XHELP_STATE_RESOLVED to a status
 * with a state of XHELP_STATE_UNRESOLVED
 * Also See: update_status, close_ticket
 * @param xhelpTicket $ticket The ticket that was re-opened
 */
function reopen_ticket($ticket)
{}


/**
 * Event: update_owner
 * Triggered after ticket ownership change (Individual)
 * Also See: batch_owner
 * @param xhelpTicket $ticket Ticket that was changed
 * @param int $oldOwner UID of previous owner
 * @param int $newOwner UID of new owner
 */
function update_owner($ticket, $oldOwner, $newOwner)
{}

/**
 * Event: update_priority
 * Triggered after a ticket priority is modified
 * Also See: batch_priority
 * @param xhelpTicket $ticket Ticket that was modified
 * @param int $oldPriority Previous ticket priority
 */
function update_priority($ticket, $oldPriority)
{}

/**
 * Event: update_status
 * Triggered after a ticket status change
 * Also See: batch_status, close_ticket, reopen_ticket 
 * @param xhelpTicket $ticket The ticket that was modified
 * @param xhelpStatus $oldStatus The previous ticket status
 * @param xhelpStatus $newStatus The new ticket status
 */
function update_status($ticket, $oldStatus, $newStatus)
{}

/**
 * Event: view_ticket
 * Triggered after a staff member views a ticket
 * @param xhelpTicket $ticket Ticket that was viewed
 */
function view_ticket($ticket)
{}